
#include "tool.h"
#include "esp_log.h"

static const char *TOOL_TAG = "TOOL";

//#define x_width 128
//#define x_height 32
uint8_t ice_logo[] = {
0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x7f, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x1f, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x0f, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x03, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x01, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xe0, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x00, 0xfe, 0xe0, 0xff, 0x01, 0xf8, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x80, 0xff, 0xf3, 0x7f, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xc0, 0xff, 0xff, 0x3f, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xe0, 0xff, 0xff, 0x1f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0xff, 0xff, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0xff, 0xff, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0xff, 0xff, 0x07, 0x30, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0xff, 0xff, 0x07, 0x18, 0xe0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0xff, 0xff, 0x07, 0x1c, 0xe0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xf0, 0xff, 0xff, 0x03, 0x0c, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0xff, 0xff, 0x03, 0x06, 0xf8, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 0xe0, 0xff, 0xff, 0x03, 0x02, 0xfc, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xe0, 0xff, 0xff, 0x03, 0x02, 0xfe, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xc0, 0xff, 0xff, 0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x80, 0xff, 0xf3, 0x07, 0x00, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x00, 0xfe, 0xe1, 0x07, 0x80, 0xe1, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x00, 0x00, 0xe0, 0x07, 0x40, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x01, 0x00, 0x80, 0x1f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x03, 0x00, 0x80, 0x1f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x07, 0x00, 0xc0, 0x3f, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x1f, 0x00, 0xf0, 0xff, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0x7f, 0x00, 0xfc, 0xff, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 
}; 

  // 'ice_logo_128_32', 128x32px
  /*
uint8_t ice_logo[] = {
0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0xff, 0x80, 0xf8, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xfe, 0x00, 0x30, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xf3, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x00, 0x3f, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x3f, 0x9f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x3f, 0xbf, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xf8, 0x00, 0x00, 0x3f, 0xbf, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xfe, 0x00, 0x30, 0x1f, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x01, 0xff, 0x80, 0x78, 0x1f, 0xfe, 0x78, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xff, 0xff, 0xf8, 0x1f, 0xfd, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x7f, 0xff, 0xfe, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x1f, 0xff, 0xfc, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x07, 0xff, 0xf0, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00
};
*/



esp_err_t pcf_init(i2c_dev_t *pp, uint8_t addr, uint8_t retry, bool log)
{
   esp_err_t err = ESP_OK;
   i2c_port_t port = I2C_NUM_0;    
   err = pcf8574_init_desc(pp, addr, port, (gpio_num_t)21, (gpio_num_t)22);   
   int i=0;
   err = i2c_dev_probe(pp,I2C_DEV_READ);
   while(err!=ESP_OK)
         {
            vTaskDelay(500/portTICK_PERIOD_MS);
            err = pcf8574_init_desc(pp, addr, port, (gpio_num_t)21, (gpio_num_t)22);
            if (i++>retry) return ESP_FAIL;
            err = i2c_dev_probe(pp,I2C_DEV_READ);
            if (log) ESP_LOGE(TOOL_TAG,"%02X error %2i %d\n",addr,i, err);
         }              
  return err;       
}

bool out_pin_convert(uint8_t pin, uint8_t *pcfno, uint8_t *pcfpin)
{
  bool ret=false;
  switch (pin)
   {
      case 1: {*pcfno=1;*pcfpin=0;ret=true;break;}
      case 2: {*pcfno=1;*pcfpin=1;ret=true;break;}
      case 3: {*pcfno=1;*pcfpin=2;ret=true;break;}
      case 4: {*pcfno=1;*pcfpin=3;ret=true;break;}
      case 5: {*pcfno=1;*pcfpin=7;ret=true;break;}
      case 6: {*pcfno=1;*pcfpin=6;ret=true;break;} //role cekmiyor

      case 7: {*pcfno=0;*pcfpin=1;ret=true;break;}
      case 8: {*pcfno=0;*pcfpin=2;ret=true;break;}
      case 9: {*pcfno=0;*pcfpin=3;ret=true;break;}
      case 10: {*pcfno=0;*pcfpin=4;ret=true;break;}
      case 11: {*pcfno=0;*pcfpin=5;ret=true;break;}
      case 12: {*pcfno=0;*pcfpin=6;ret=true;break;} //led yanmıyor
   }
  return ret;
}

bool in_pin_convert(uint8_t pin, uint8_t *pcfno, uint8_t *pcfpin)
{
  bool ret=false;
  if (pin>=1 && pin<=8) {
                          *pcfno=2;
                          *pcfpin=pin-1;
                          ret=true;
                        }
  if (pin==9) {*pcfno=0; *pcfpin=7; ret=true; }    
  if (pin==10) {*pcfno=0; *pcfpin=0; ret=true; }                 
  if (pin==11) {*pcfno=1; *pcfpin=4; ret=true; }
  if (pin==12) {*pcfno=1; *pcfpin=5; ret=true; }                                      
  return ret;
}

void inout_test(i2c_dev_t **pcf)
{
    #define a_delay 800
    #define a_delay1 500

      for (int j=1;j<13;j++)
        {  
          uint8_t pc=0, pn =0;
          out_pin_convert(j,&pc,&pn);
          pcf8574_pin_write(pcf[pc],pn,0);
          if ((j%2)==0)
            {
                ESP_LOGI(TOOL_TAG,"--> %02d <-- PCF %d pin=%d level=0",j,pc,pn);
            } else {
                ESP_LOGW(TOOL_TAG,"%02d PCF %d pin=%d level=0",j,pc,pn);
            }    
          vTaskDelay(a_delay/portTICK_PERIOD_MS);
          pcf8574_pin_write(pcf[pc],pn,1);
          //ESP_LOGI(TOOL_TAG,"%02d PCF %d pin=%d level=1",j, pc,pn);
          vTaskDelay(a_delay1/portTICK_PERIOD_MS);
        } 


    ESP_LOGE(TOOL_TAG,"GIRISLERI GND'ye çekerek test ediniz. Cikis icin RESET\n");
    uint8_t val0=0, val1 = 0, val2=0,val00 = 0xff, val11=0xff, val22 = 0xff;
    bool rep = true;
    while (rep)
      {  
        
        pcf8574_port_read(pcf[0], &val0);
        pcf8574_port_read(pcf[1], &val1);
        pcf8574_port_read(pcf[2], &val2);

        if (val0!=val00) {
                 val00 = val0;
                 if (val0!=0xFF) ESP_LOGI(TOOL_TAG,"PCF0 = %02X Flag " BIN_PATTERN,val0,BYTE_TO_BIN(val0));
                         }
        if (val1!=val11) {
                 val11 = val1;
                 if (val1!=0xFF) ESP_LOGI(TOOL_TAG,"PCF1 = %02X Flag " BIN_PATTERN,val1,BYTE_TO_BIN(val1));
                         }  
        if (val2!=val22) {
                 val22 = val2;
                 if (val2!=0xFF) ESP_LOGI(TOOL_TAG,"PCF2 = %02X Flag " BIN_PATTERN,val2,BYTE_TO_BIN(val2));
                         }                         
        
        vTaskDelay(50/portTICK_PERIOD_MS);
      }   
      
}


void test01(uint16_t a_delay2, i2c_dev_t **pcf)
{
   while (true)
   {
     for (int j=1;j<13;j++)
        {  
          uint8_t pc=0, pn =0;
          out_pin_convert(j,&pc,&pn);
          pcf8574_pin_write(pcf[pc],pn,0);
          vTaskDelay(a_delay2/portTICK_PERIOD_MS);
          pcf8574_pin_write(pcf[pc],pn,1);
          vTaskDelay(1/portTICK_PERIOD_MS);
        } 
   }    
}

void test02(uint16_t a_delay2, i2c_dev_t **pcf)
{
   uint8_t aa = 0x00;
   while (true)
   {
      pcf8574_port_write(pcf[0],aa);
      pcf8574_port_write(pcf[1],aa);
      vTaskDelay(a_delay2/portTICK_PERIOD_MS);
      if (aa==0x00) aa=0xFF; else aa=0x00;
   }    
}






#define CONFIG_SDA_GPIO 21
#define CONFIG_SCL_GPIO 22
#define CONFIG_RESET_GPIO -1
#define I2C_PORT 0


void ekran_test(void)
{	 
 // OLEDDisplay_t *oled = OLEDDisplay_init(I2C_PORT,0x78,CONFIG_SDA_GPIO,CONFIG_SCL_GPIO);

//	OLEDDisplay_fillRect(oled,7,7,18,18);
//	OLEDDisplay_drawRect(oled,6,32,20,20);
//	OLEDDisplay_display(oled);
   
}

void logo_print(OLEDDisplay_t *ekr)
{
  OLEDDisplay_clear(ekr);
  OLEDDisplay_display(ekr);
  OLEDDisplay_drawXbm(ekr, 1,1, 128, 32, ice_logo);
  OLEDDisplay_display(ekr);
  //ssd1306_bitmaps(ekr,0,0,ice_logo,128,32,false);
  vTaskDelay(2000/portTICK_PERIOD_MS);
  OLEDDisplay_clear(ekr);
  OLEDDisplay_display(ekr);
}

uint8_t line_clear(OLEDDisplay_t *ekr, uint16_t line)
{
  uint8_t y=0;
  if (line==0) y=0;
  if (line==1) y=10;
  if (line==2) y=20;
  for (int r=y;r<y+14;r++)
  for (int i=0;i<128;i++)
    {
      OLEDDisplay_setPixelColor(ekr,i,r,BLACK);
    }
  //OLEDDisplay_display(ekr);
  return y;  
}

void line_print(OLEDDisplay_t *ekr, uint16_t line, char *buffer)
{
  uint8_t y=line_clear(ekr,line);
  OLEDDisplay_drawString(ekr, 0, y, buffer);
  OLEDDisplay_display(ekr);
}
void ekran_print(OLEDDisplay_t *ekr, uint16_t x, uint16_t y, char *buffer)
{
  
  //OLEDDisplay_setColor(ekr,BLACK);
  printf("x=%d y=%d\n",x,y);
  for (int r=y;r<y+10;r++)
  for (int i=0;i<128;i++)
    {
      OLEDDisplay_setPixelColor(ekr,i,r,BLACK);
    }
  
  OLEDDisplay_display(ekr);

  OLEDDisplay_setColor(ekr,WHITE);
  OLEDDisplay_drawString(ekr, x, y, buffer);
  OLEDDisplay_display(ekr);
}